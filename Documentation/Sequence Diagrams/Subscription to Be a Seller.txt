@startuml
actor User
participant "Client" as Client
participant "AuthController" as AuthController
participant "AuthService" as AuthService
participant "ASP.NETUserIdentity" as ASP.NETUserIdentity

User -> Client: Request Subscription to Be a Seller
activate Client

Client -> AuthController: POST /api/Auth/Subscribe
activate AuthController

AuthController -> AuthService: SupscripeAsync(SupscriptionModel)
activate AuthService

AuthService -> ASP.NETUserIdentity: FindByIdAsync
activate ASP.NETUserIdentity
ASP.NETUserIdentity --> AuthService: User
deactivate ASP.NETUserIdentity

alt User Found
    AuthService -> ASP.NETUserIdentity: RoleExistsAsync
    activate ASP.NETUserIdentity
    ASP.NETUserIdentity --> AuthService: RoleExists
    deactivate ASP.NETUserIdentity

    AuthService -> ASP.NETUserIdentity: IsInRoleAsync
    activate ASP.NETUserIdentity
    ASP.NETUserIdentity --> AuthService: IsInRole
    deactivate ASP.NETUserIdentity

    AuthService -> ASP.NETUserIdentity: AddToRoleAsync
    activate ASP.NETUserIdentity
    ASP.NETUserIdentity --> AuthService: Result
    deactivate ASP.NETUserIdentity

    AuthService -> AuthService: CreateJwtToken(User)
    activate AuthService
    AuthService --> AuthController: JWT Token
    deactivate AuthService

    AuthController --> Client: Success message
    deactivate AuthController
else User Not Found or Role Invalid
    AuthService --> AuthController : User Not Found or Role Invalid
    activate AuthController
    AuthController --> Client : User Not Found or Role Invalid
    deactivate AuthService
    deactivate AuthController
end

deactivate AuthService
deactivate Client
@enduml
